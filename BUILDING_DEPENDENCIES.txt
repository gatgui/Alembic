Setup BUILD_DIR to point to whatever directory you want the output libraries to be


Building szip 2.1 as a static library
   
   [unix]

   # Force PIC objects
   export CFLAGS="-fPIC" (*)
   export CXXFLAGS=$CFLAGS
   # Configure
   ./configure --prefix=$BUILD_DIR --enable-static --disable-shared --with-pic --enable-production
   # Build
   make
   # Deploy
   make install

   [windows]

   Use the visual studio project provided with the source code to build the static version of the library as it is.


Building zlib 1.2.8 as a static library
   
   [unix]

   export CFLAGS="-fPIC" (*)
   export CXXFLAGS=$CFLAGS
   ./configure --prefix=$BUILD_DIR --static
   make
   make install

   [windows]

   Overwrite the content of zlib source tree "contrib/vstudio/vc9" directory with that of "build/Windows/vc9/zlib-1.2.8/contrib/vstudio/vc9".
   Open a visual studio prompt and run zlib source tree "contrib/masmx64/bld_ml64.bat" from its own directory.
   Open the "contrib/vstudio/vc9/zlibvc.sln" solution and build the "zlibvc" target.


Building hdf5 1.8.13 as a static library
   
   [unix]

   export CFLAGS="-fPIC" (*)
   export CXXFLAGS=$CFLAGS
   ./configure --prefix=$BUILD_DIR --with-szlib=$BUILD_DIR --with-zlib=$BUILD_DIR --enable-production --enable-cxx --enable-static --disable-shared (--enable-threadsafe --enable-unsupported)
   make
   make install

   [windows]
   
   Edit CMakeLists.txt to enable use of thread safe build with static build and cpp lib
     comment out line 705, 706, 707, 714, 715 and 716:
     
     #if (H5_BUILT_AS_STATIC_LIB)
     #  message (FATAL_ERROR " **** thread-safety option not supported with static library **** ")
     #endif (H5_BUILT_AS_STATIC_LIB)

     #if (HDF5_BUILD_CPP_LIB)
     #  message (FATAL_ERROR " **** C++ and thread-safety options are not supported **** ")
     #endif (HDF5_BUILD_CPP_LIB)

   Use cmake gui to generate the visual studio solution
     Enable HL and C++ lib
     Enable zlib and setup to point at the zlib compiled in previous step
     Enable szip and setup to point at the szip compiled in previous step
     Enable tools
     Enable threadsafe yet (won't work anyway)
     Build as static
   Build ALL_BUILD target from generated solution


Building boost 1.44.0 as static libraries but for boost python
   
   ./bootstrap.sh --prefix=$BUILD_DIR
   # [unix] Edit tools/build/v2/user-config.jam to add gcc compile flags adding a line
   #   'using gcc : : : <compileflags>-fPIC ;' (*)
   ./bjam --without-python variant=release link=static runtime-link=shared threading=multi --prefix=$BUILD_DIR install
   # [unix] Revert the compileflags in user-config.jam and possibly setup python
   # [osx] Fix boost build python tool (see notes below)
   # As for ilmbase libraries, prefix generated library with '_alembic'
   # In libs/python/build/Jamfile.v2, replace 'boost_python' by
   #   'boost_python_alembic' in the rule name and library name
   ./bjam --with-python variant=release link=shared runtime-link=shared threading=single --prefix=$BUILD_DIR install
   
   Notes:
   - Setting up python version in user-config.jam:
       using python : 2.6 ;
       or
       using python : 2.6 : path/to/python ;
       (See bjam documentation for more details)
   - On windows, Add "toolset=msvc-9.0 address-model=64” to the command line
   - On OSX, boost build does explicitely link python framework to boost_python
     library. This ends up being problematic (crash) when trying to load python
     module using it from an application that embeds its own python.
     In tools/build/v2/tools/python.jam replace:
     
       if $(target-os) in windows cygwin darwin 
       {
         alias python_for_extensions : python : $(target-requirements) ;
       }
     
     with:
     
       if $(target-os) in windows cygwin
       {
         alias python_for_extensions : python : $(target-requirements) ;
       }
       else if $(target-os) = darwin
       {
         alias python_for_extensions
                   :
                   : $(target-requirements)
                   :
                   : $(usage-requirements)
       <linkflags>"-undefined dynamic_lookup"
                   ;
       }
   - On OSX Yosemite, boost 1.44.0 doesn’t build properly, use 1.49.0 instead
     'bjam' is renamed to 'b2' and signals library won’t build as it is.
     Either ignore it (—without-signals) or modify the
       libs/signals/src/named_slot_map.cpp as indicated:
       
       Line 105: replace "groups.erase(group)” by
                 "groups.erase(static_cast<const_group_iterator>(group))"
       Line 128: replace "groups.erase(g++)” by
                 "groups.erase(static_cast<const_group_iterator>(g++))"


Building ilmbase 1.0.3 as shared libraries
   
   [unix]

   # Be sure to reset CFLAGS/CXXFLAGS first
   export CFLAGS=
   export CXXFLAGS=
   ./configure --prefix=$BUILD_DIR --disable-static --enable-shared
   # To avoid conflict with existing system/application wide ilmbase libraries
   # add a '_alembic' suffix to all generated libraries by editing Makefile
   # files manually (hint: look for the string ".la")
   make
   make install

   [windows]

   Overwrite the content of ilmbase source tree top directory with that of "build/Windows/vc9/ilmbase-1.0.3".
   You have to observe the following directory layout:
     path-to-work-directory/ (or wherever you want)
       boost/ (FIXED NAME, output build from previous step)
         include/
           boost/
         lib/
       python26/ (FIXED NAME, a standard python 2.6 install)
         include/
         libs/
       src/ (or whatever name you want)
         ilmbase-1.0.3/
         pyilmbase-1.0.0/
       Deploy/ (output of ilmbase, pyilmbase build)
   Open the "vc/vc9/IlmBase/PyIlmBase.sln" solution and build the "Half", "Iex", "IexMath" and "Imath" targets.


Building pyilmbase 1.0.0
   
   [unix]

   ./configure --prefix=$BUILD_DIR --disable-ilmbasetest --with-ilmbase-prefix=$BUILD_DIR --with-boost-include-dir=$BUILD_DIR/include --with-boost-lib-dir=$BUILD_DIR/lib --with-boost-python-libname=boost_python_alembic --disable-boostpythontest
   # Edit Makefiles to use suffixed version if ilmbase libraries
   # Also add '_alembic' suffix to PyImath and PyIex library names
   #   (hint: Look for all ".la" and "-lPyI" in Makefiles)
   # [OSX only] Further fix Makefiles to allow undefined symbols and don't link
   #   libraries to python. Look for the following strings:
   #     _LDFLAGS: add "-undefined dynamic_lookup" (and remove "-no_undefined")
   #     LIBS: comment out "-lpythonx.x"
   make -j2
   make install

   Notes:
   - To use another python than the system-wide one, one can set PYTHON and
     PYTHON_VERSION environment prior to calling configure
       export PYTHON=/usr/bin/python2.6
       export PYTHON_VERSION=2.6
   - If you don't have numpy installed you may want to add --without-numpy to
     the configure line
   - On OSX Yosemite, build failed out of the box.
     I had to fix the following files:
     
     PyImathStringTable.cpp
       Replace any “_table.get<>" by "_table.template get<>"
     
     PyImathFixedArray2D.h
       Operators must be declared in PyImath namespace, not global scope:
       => line 463: comment out PyImath namespace closing
       => line 637: comment out PyImath namespace opening

   [windows]
   
   Overwrite the content of pyilmbase source tree top directory with that of "build/Windows/vc9/pyilmbase-1.0.0".
   Open the solution from ilmbase build step and build the "iexmodule" and "imathmodule" targets.


(*): On OSX, use "-fPIC -fno-common -fvisibility=hidden -DPIC" instead.
     The visibility flags is for gcc to stop issuing warning about code
     visibility changes when the static library is linked to a dynamic
     one or a program.
