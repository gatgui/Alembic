
global proc alembicExportOptions_frameRangeChanged()
{
   string $val = `optionMenuGrp -q -v optRange`;
   
   if ($val == "Time Slider")
   {
      floatFieldGrp -e -v1 `playbackOptions -q -animationStartTime` optCustRange;
      floatFieldGrp -e -v2 `playbackOptions -q -animationEndTime` optCustRange;
   }
   else if ($val == "Render Settings")
   {
      floatFieldGrp -e -v1 `getAttr defaultRenderGlobals.startFrame` optCustRange;
      floatFieldGrp -e -v2 `getAttr defaultRenderGlobals.endFrame` optCustRange;
   }
   
   floatFieldGrp -e -en ($val == "Custom") optCustRange;
}

global proc int alembicExportOptions(string $parent,
                                     string $action,
                                     string $initialSettings,
                                     string $resultCallback)
{
   global string $gAbcLastOptions;

   int $result = 0;
   string $flt = "";
   string $impOpts = "";
   string $expOpts = "";

   string $curParent = `setParent -query`;
   setParent $parent;

   if ($action == "post")
   {
      // Build UI elements
      
      frameLayout -collapsable false -label "Sampling" -bv false;
         columnLayout;
            optionMenuGrp -l "Frame Range:" -adj 2 -cal 1 right -cal 2 left -cc "alembicExportOptions_frameRangeChanged" optRange;
            menuItem -l "Render Settings";
            menuItem -l "Time Slider";
            menuItem -l "Custom";
            optionMenuGrp -e -v "Time Slider" optRange;
            floatFieldGrp -nf 2 -l "" -v1 1.0 -v2 24.0 optCustRange;
            floatFieldGrp -nf 1 -l "Frame Step:" -adj 2 -cal 1 right -cal 2 left -v1 1.0 optStep;
            textFieldGrp -l "Frame Relative Samples:" -adj 2 -cal 1 right -cal 2 left -tx "" optRelSamp;
            floatFieldGrp -nf 1 -l "Pre-roll Frames:" -adj 2 -cal 1 right -cal 2 left -v1 0.0 optPreRoll;
         setParent ..;
      setParent ..;
      
      frameLayout -collapsable false -label "General" -bv false;
         columnLayout;
            checkBoxGrp -ncb 1 -l "" -l1 "Strip Namespaces" -adj 2 -cal 1 right -cal 2 left -v1 false optStripNS;
            checkBoxGrp -ncb 1 -l "" -l1 "Whole Frame Geo" -adj 2 -cal 1 right -cal 2 left -v1 false optWholeFrameGeo;
            checkBoxGrp -ncb 1 -l "" -l1 "Renderable Only" -adj 2 -cal 1 right -cal 2 left -v1 false optRenderOnly;
            checkBoxGrp -ncb 1 -l "" -l1 "World Space" -adj 2 -cal 1 right -cal 2 left -v1 false optWorldSpace;
            checkBoxGrp -ncb 1 -l "" -l1 "Write Visibility" -adj 2 -cal 1 right -cal 2 left -v1 false optWriteVis;
            checkBoxGrp -ncb 1 -l "" -l1 "Write Instances" -adj 2 -cal 1 right -cal 2 left -v1 false optWriteInst;
            checkBoxGrp -ncb 1 -l "" -l1 "Euler Filter" -adj 2 -cal 1 right -cal 2 left -v1 false optEulerFilter;
         setParent ..;
      setParent ..;
      
      frameLayout -collapsable false -label "Attributes" -bv false;
         columnLayout;
            textFieldGrp -l "Geometric Attributes:" -adj 2 -cal 1 right -cal 2 left -tx "" optGAList;
            textFieldGrp -l "Geometric Attr. Prefices:" -adj 2 -cal 1 right -cal 2 left -tx "ABC_" optGAPref;
            textFieldGrp -l "User Attributes:" -adj 2 -cal 1 right -cal 2 left -tx "" optUAList;
            textFieldGrp -l "User Attr. Prefices:" -adj 2 -cal 1 right -cal 2 left -tx "" optUAPref;
         setParent ..;
      setParent ..;
      
      frameLayout -collapsable false -label "Mesh" -bv false;
         columnLayout;
            checkBoxGrp -ncb 1 -l "" -l1 "No Normals" -adj 2 -cal 1 right -cal 2 left -v1 false optNoNormals;
            checkBoxGrp -ncb 1 -l "" -l1 "Write Primary UV" -adj 2 -cal 1 right -cal 2 left -v1 false optWriteUV;
            checkBoxGrp -ncb 1 -l "" -l1 "Write All UVs" -adj 2 -cal 1 right -cal 2 left -v1 false optWriteAllUVs;
            checkBoxGrp -ncb 1 -l "" -l1 "Write Color Sets" -adj 2 -cal 1 right -cal 2 left -v1 false optWriteColors;
            checkBoxGrp -ncb 1 -l "" -l1 "Write Face Sets" -adj 2 -cal 1 right -cal 2 left -v1 false optWriteFaceSets;
            checkBoxGrp -ncb 1 -l "" -l1 "Write Reference Mesh" -adj 2 -cal 1 right -cal 2 left -v1 false optWriteReferenceMesh;
         setParent ..;
      setParent ..;
      
      frameLayout -collapsable false -label "Scripts" -bv false;
         columnLayout;
            textFieldGrp -l "Per Frame MEL:" -adj 2 -cal 1 right -cal 2 left -tx "" optPerFrameMel;
            textFieldGrp -l "Per Frame Python:" -adj 2 -cal 1 right -cal 2 left -tx "" optPerFramePy;
            textFieldGrp -l "Post Job MEL:" -adj 2 -cal 1 right -cal 2 left -tx "" optPostJobMel;
            textFieldGrp -l "Post Job Python:" -adj 2 -cal 1 right -cal 2 left -tx "" optPostJobPy;
         setParent ..;
      setParent ..;
      
      separator -style "in";
      
      //-duf/-dontSkipUnwrittenFrames
      optionMenuGrp -l "Format:" -cal 1 right -cal 2 left optFmt;
      menuItem -l "Ogawa";
      menuItem -l "HDF";
      optionMenuGrp -e -v "Ogawa" optFmt;
      checkBoxGrp -ncb 1 -l "" -l1 "Verbose" -adj 2 -cal 1 right -cal 2 left -v1 false optVerb;

      if (size($initialSettings) > 0)
      {
         // parse option string and set UI
         string $optlist[];
         int $n = tokenize($initialSettings, ";", $optlist);
         string $options = "";
         
         string $frt = "Time Slider";
         float $sf = 1;
         float $ef = 1;
         
         for ($i=0; $i<$n; $i++)
         {
            string $keyval[];
            
            int $n2 = tokenize($optlist[$i], "=", $keyval);
            
            if ($n2 < 2)
            {
               continue;
            }
            
            string $key = $keyval[0];
            string $val = $keyval[1];
            for ($j=2; $j<$n2; $j++)
            {
               $val += "=";
               $val += $keyval[$j];
            }
            
            if (size(match($key+"=", $options)) > 0)
            {
               // options already processed
               continue;
            }
            else
            {
               if (size($options) > 0)
               {
                  $options += ";";
               }
               $options += $optlist[$i];
            }
            
            if ($key == "v")
            {
               checkBoxGrp -e -v1 ($val == "1") optVerb;
            }
            else if ($key == "frt")
            {
               if ($val == "Render Settings" || $val == "Time Slider" || $val == "Custom")
               {
                  $frt = $val;
               }
               else
               {
                  print("alembicExportOptions: Invalid range type '" + $val + "'\n");
               }
            }
            else if ($key == "ff")
            {
               $sf = float($val);
            }
            else if ($key == "lf")
            {
               $ef = float($val);
            }
            else if ($key == "s")
            {
               float $fv = float($val);
               floatFieldGrp -e -v1 $fv optStep;
            }
            else if ($key == "frs")
            {
               textFieldGrp -e -tx $val optRelSamp;
            }
            else if ($key == "pr")
            {
               float $fv = float($val);
               floatFieldGrp -e -v1 $fv optPreRoll;
            }
            else if ($key == "df")
            {
               if ($val == "Ogawa" || $val == "HDF")
               {
                  optionMenuGrp -e -v $val optFmt;
               }
               else
               {
                  print("alembicExportOptions: Invalid format '" + $val + "'\n");
               }
            }
            else if ($key == "sn")
            {
               checkBoxGrp -e -v1 ($val == "1") optStripNS;
            }
            else if ($key == "wfg")
            {
               checkBoxGrp -e -v1 ($val == "1") optWholeFrameGeo;
            }
            else if ($key == "ro")
            {
               checkBoxGrp -e -v1 ($val == "1") optRenderOnly;
            }
            else if ($key == "ws")
            {
               checkBoxGrp -e -v1 ($val == "1") optWorldSpace;
            }
            else if ($key == "wv")
            {
               checkBoxGrp -e -v1 ($val == "1") optWriteVis;
            }
            else if ($key == "wi")
            {
               checkBoxGrp -e -v1 ($val == "1") optWriteInst;
            }
            else if ($key == "ef")
            {
               checkBoxGrp -e -v1 ($val == "1") optEulerFilter;
            }
            else if ($key == "nn")
            {
               checkBoxGrp -e -v1 ($val == "1") optNoNormals;
            }
            else if ($key == "uv")
            {
               checkBoxGrp -e -v1 ($val == "1") optWriteUV;
            }
            else if ($key == "wuvs")
            {
               checkBoxGrp -e -v1 ($val == "1") optWriteAllUVs;
            }
            else if ($key == "wcs")
            {
               checkBoxGrp -e -v1 ($val == "1") optWriteColors;
            }
            else if ($key == "wfs")
            {
               checkBoxGrp -e -v1 ($val == "1") optWriteFaceSets;
            }
            else if ($key == "wrm")
            {
               checkBoxGrp -e -v1 ($val == "1") optWriteReferenceMesh;
            }
            else if ($key == "fc" || $key == "pc")
            {
               if (size(match("^<py>", $val)) > 0)
               {
                  while (size(match("</py>$", $optlist[$i])) == 0)
                  {
                     $i++;
                     if ($i >= size($optlist))
                     {
                        break;
                     }
                     $val += ";" + $optlist[$i];
                  }
                  $val = substring($val, 5, size($val)-5);
                  if ($key == "fc")
                  {
                      textFieldGrp -e -tx $val optPerFramePy;
                  }
                  else
                  {
                      textFieldGrp -e -tx $val optPostJobPy;
                  }
               }
               else if (size(match("^<mel>", $val)) > 0)
               {
                  while (size(match("</mel>$", $optlist[$i])) == 0)
                  {
                     $i++;
                     if ($i >= size($optlist))
                     {
                        break;
                     }
                     $val += ";" + $optlist[$i];
                  }
                  $val = substring($val, 6, size($val)-6);
                  if ($key == "fc")
                  {
                      textFieldGrp -e -tx $val optPerFrameMel;
                  }
                  else
                  {
                      textFieldGrp -e -tx $val optPostJobMel;
                  }
               }
            }
            else if ($key == "a")
            {
               textFieldGrp -e -tx $val optGAList;
            }
            else if ($key == "atp")
            {
               textFieldGrp -e -tx $val optGAPref;
            }
            else if ($key == "u")
            {
               textFieldGrp -e -tx $val optUAList;
            }
            else if ($key == "uatp")
            {
               textFieldGrp -e -tx $val optUAPref;
            }
         }

         // at this point, $options is a 'clean' version of $initialSettings
         $initialSettings = $options;

         // for some reasons this is failing
         optionMenuGrp -e -v $frt optRange;
         if ($frt == "Custom")
         {
            floatFieldGrp -e -v1 $sf -v2 $ef optCustRange;
         }
      }
      
      // Update editable state
      alembicExportOptions_frameRangeChanged();

      $gAbcLastOptions = $initialSettings;

      $result = 1;
   }
   else if ($action == "query")
   {
      // Set export options
      string $text;
      
      $expOpts = "frt=" + `optionMenuGrp -q -v optRange`;
      $expOpts += ";ff=" + `floatFieldGrp -q -v1 optCustRange`;
      $expOpts += ";lf=" + `floatFieldGrp -q -v2 optCustRange`;
      $expOpts += ";s=" + `floatFieldGrp -q -v1 optStep`;
      $expOpts += ";frs=" + `textFieldGrp -q -tx optRelSamp`;
      $expOpts += ";pr=" + `floatFieldGrp -q -v1 optPreRoll`;
      
      if (`checkBoxGrp -q -v1 optVerb` == true)
      {
         $expOpts += ";v=1";
      }
      
      if (`checkBoxGrp -q -v1 optStripNS` == true)
      {
         $expOpts += ";sn=1";
      }
      
      if (`checkBoxGrp -q -v1 optWholeFrameGeo` == true)
      {
         $expOpts += ";wfg=1";
      }
      
      if (`checkBoxGrp -q -v1 optRenderOnly` == true)
      {
         $expOpts += ";ro=1";
      }
      
      if (`checkBoxGrp -q -v1 optWorldSpace` == true)
      {
         $expOpts += ";ws=1";
      }
      
      if (`checkBoxGrp -q -v1 optWriteVis` == true)
      {
         $expOpts += ";wv=1";
      }
      
      if (`checkBoxGrp -q -v1 optWriteInst` == true)
      {
         $expOpts += ";wi=1";
      }
      
      if (`checkBoxGrp -q -v1 optEulerFilter` == true)
      {
         $expOpts += ";ef=1";
      }
      
      if (`checkBoxGrp -q -v1 optNoNormals` == true)
      {
         $expOpts += ";nn=1";
      }
      
      if (`checkBoxGrp -q -v1 optWriteUV` == true)
      {
         $expOpts += ";uv=1";
      }
      
      if (`checkBoxGrp -q -v1 optWriteAllUVs` == true)
      {
         $expOpts += ";wuvs=1";
      }
      
      if (`checkBoxGrp -q -v1 optWriteColors` == true)
      {
         $expOpts += ";wcs=1";
      }
      
      if (`checkBoxGrp -q -v1 optWriteFaceSets` == true)
      {
         $expOpts += ";wfs=1";
      }
      
      if (`checkBoxGrp -q -v1 optWriteReferenceMesh` == true)
      {
         $expOpts += ";wrm=1";
      }
      
      $text = `textFieldGrp -q -tx optGAList`;
      if (size($text) > 0)
      {
         $expOpts += ";a=" + $text;
      }
      
      $text = `textFieldGrp -q -tx optGAPref`;
      if (size($text) > 0)
      {
         $expOpts += ";atp=" + $text;
      }
      
      $text = `textFieldGrp -q -tx optUAList`;
      if (size($text) > 0)
      {
         $expOpts += ";u=" + $text;
      }
      
      $text = `textFieldGrp -q -tx optUAPref`;
      if (size($text) > 0)
      {
         $expOpts += ";uatp=" + $text;
      }
      
      $text = `textFieldGrp -q -tx optPerFrameMel`;
      if (size($text) > 0)
      {
         $text = substituteAllString($text, "\\", "\\\\");
         $text = substituteAllString($text, "\"", "\\\"");
         $expOpts += ";fc=<mel>" + $text + "</mel>";
      }
      
      $text = `textFieldGrp -q -tx optPerFramePy`;
      if (size($text) > 0)
      {
         $text = substituteAllString($text, "\\", "\\\\");
         $text = substituteAllString($text, "\"", "\\\"");
         $expOpts += ";fc=<py>" + $text + "</py>";
      }
      
      $text = `textFieldGrp -q -tx optPostJobMel`;
      if (size($text) > 0)
      {
         $text = substituteAllString($text, "\\", "\\\\");
         $text = substituteAllString($text, "\"", "\\\"");
         $expOpts += ";pc=<mel>" + $text + "</mel>";
      }
      
      $text = `textFieldGrp -q -tx optPostJobPy`;
      if (size($text) > 0)
      {
         $text = substituteAllString($text, "\\", "\\\\");
         $text = substituteAllString($text, "\"", "\\\"");
         $expOpts += ";pc=<py>" + $text + "</py>";
      }
      
      $expOpts += ";df=" + `optionMenuGrp -q -v optFmt`;
      
      $expOpts = substituteAllString($expOpts, "\\", "\\\\");
      $expOpts = substituteAllString($expOpts, "\"", "\\\"");

      // Preserve other options in $initialSettings
      if (size($initialSettings) > 0)
      {
         // parse option string and set UI
         string $optlist[];
         int $n = tokenize($initialSettings, ";", $optlist);
         
         string $frt;
         float $sf, $ef;
         
         for ($i=0; $i<$n; $i++)
         {
            string $keyval[];
            
            int $n2 = tokenize($optlist[$i], "=", $keyval);
            
            if ($n2 < 2)
            {
               if (size($impOpts) > 0)
               {
                  $impOpts += ";";
               }
               $impOpts += $optlist[$i];
               continue;
            }

            string $key = $keyval[0];
            string $val = $keyval[1];
            for ($j=2; $j<$n2; $j++)
            {
               $val += "=";
               $val += $keyval[$j];
            }
            
            if ($key == "v" ||
                $key == "frt" ||
                $key == "ff" ||
                $key == "lf" ||
                $key == "s" ||
                $key == "frs" ||
                $key == "pr" ||
                $key == "df" ||
                $key == "sn" ||
                $key == "wfg" ||
                $key == "ro" ||
                $key == "ws" ||
                $key == "wv" ||
                $key == "wi" ||
                $key == "ef" ||
                $key == "nn" ||
                $key == "uv" ||
                $key == "wuvs" ||
                $key == "wcs" ||
                $key == "wfs" ||
                $key == "wrm" ||
                $key == "fc" ||
                $key == "pc" ||
                $key == "a" ||
                $key == "atp" ||
                $key == "u" ||
                $key == "uatp")
            {
               continue;
            }
            else
            {
               if (size(match($key+"=", $impOpts)) > 0)
               {
                  // Import option is already set
                  continue;
               }
               if (size($impOpts) > 0)
               {
                  $impOpts += ";";
               }
               $impOpts += $key + "=" + $val;
            }
         }
      }

      string $allOpts = "";
      if (size($impOpts))
      {
         $allOpts += $impOpts;
      }
      if (size($expOpts))
      {
         if (size($allOpts) > 0)
         {
            $allOpts += ";";
         }
         $allOpts += $expOpts;
      }

      $gAbcLastOptions = $allOpts;

      eval($resultCallback + " \"" + $gAbcLastOptions + "\""); 

      $result = 1;
   }
   else
   {
      $gAbcLastOptions = $initialSettings;

      $result = 0;
   }

   setParent $curParent;

   return $result;
}
