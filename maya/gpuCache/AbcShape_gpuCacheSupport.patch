diff --git a/maya/AbcShape/AbcShapeImport.cpp b/maya/AbcShape/AbcShapeImport.cpp
index 859a2d6..f51e8bd 100644
--- a/maya/AbcShape/AbcShapeImport.cpp
+++ b/maya/AbcShape/AbcShapeImport.cpp
@@ -61,6 +61,7 @@ MSyntax AbcShapeImport::createSyntax()
    syntax.addFlag("-crt", "-createIfNotFound", MSyntax::kNoArg);
    syntax.addFlag("-rm", "-removeIfNoUpdate", MSyntax::kNoArg);
    syntax.addFlag("-h", "-help", MSyntax::kNoArg);
+   syntax.addFlag("-ugc", "-useGpuCache", MSyntax::kNoArg);
    
    syntax.makeFlagMultiUse("-nri");
    
@@ -203,7 +204,8 @@ public:
               double offset,
               bool preserveStartFrame,
               AbcShape::CycleType cycleType,
-              bool createNodes);
+              bool createNodes,
+              bool useGpuCache);
    
    AlembicNode::VisitReturn enter(AlembicMesh &node, AlembicNode *instance=0);
    AlembicNode::VisitReturn enter(AlembicSubD &node, AlembicNode *instance=0);
@@ -323,6 +325,7 @@ private:
    MPlug mTimeSource;
    std::set<std::string> mProcessed;
    bool mCreateNodes;
+   bool mUseGpuCache;
 };
 
 UpdateTree::UpdateTree(const std::string &abcPath,
@@ -333,7 +336,8 @@ UpdateTree::UpdateTree(const std::string &abcPath,
                        double offset,
                        bool preserveStartFrame,
                        AbcShape::CycleType cycleType,
-                       bool createNodes)
+                       bool createNodes,
+                       bool useGpuCache)
    : mAbcPath(abcPath)
    , mMode(mode)
    , mIgnoreTransforms(ignoreTransforms)
@@ -343,6 +347,7 @@ UpdateTree::UpdateTree(const std::string &abcPath,
    , mPreserveStartFrame(preserveStartFrame)
    , mCycleType(cycleType)
    , mCreateNodes(createNodes)
+   , mUseGpuCache(useGpuCache)
 {
    MSelectionList sl;
    MObject timeObj;
@@ -352,6 +357,11 @@ UpdateTree::UpdateTree(const std::string &abcPath,
    
    MFnDependencyNode timeNode(timeObj);
    mTimeSource = timeNode.findPlug("outTime");
+
+   if (useGpuCache)
+   {
+      MGlobal::executeCommand("if (`pluginInfo -q -l gpuCache` == 0) { loadPlugin gpuCache; }");
+   }
 }
 
 bool UpdateTree::hasDag(const std::string &path) const
@@ -509,7 +519,7 @@ bool UpdateTree::createDag(const char *dagType, AlembicNode *node, bool force)
          entry.dagPath = dagPath;
          entry.typeName = dagType;
          
-         if (dagType == PREFIX_NAME("AbcShape"))
+         if (dagType == PREFIX_NAME("AbcShape") || dagType == "gpuCache")
          {
             AbcShape::AssignDefaultShader(obj);
          }
@@ -559,16 +569,33 @@ AlembicNode::VisitReturn UpdateTree::enterShape(AlembicNodeT<T> &node, AlembicNo
       }
       
       // Note: The force here is not needed as we don't check for exact type any more
-      if (!createDag(PREFIX_NAME("AbcShape"), target, true))
+      if (mUseGpuCache)
       {
-         return AlembicNode::StopVisit;
+         if (!createDag("gpuCache", target, true))
+         {
+            return AlembicNode::StopVisit;
+         }
+      }
+      else
+      {
+         if (!createDag(PREFIX_NAME("AbcShape"), target, true))
+         {
+            return AlembicNode::StopVisit;
+         }
       }
       
       typeMatch = true;
    }
    else
    {
-      typeMatch = checkExistingDag(target, PREFIX_NAME("AbcShape"));
+      if (mUseGpuCache)
+      {
+         typeMatch = checkExistingDag(target, "gpuCache");
+      }
+      else
+      {
+         typeMatch = checkExistingDag(target, PREFIX_NAME("AbcShape"));
+      }
    }
    
    MFnDagNode dagNode(getDag(targetPath));
@@ -578,82 +605,103 @@ AlembicNode::VisitReturn UpdateTree::enterShape(AlembicNodeT<T> &node, AlembicNo
       // Set AbcShape (the order in which attributes are set is though as to have the lowest possible update cost)
       MPlug plug;
       
-      plug = dagNode.findPlug("ignoreXforms");
-      plug.setBool(!mIgnoreTransforms);
-      // Should I disable 'inheritsTransform' on parent too?
-      
-      plug = dagNode.findPlug("ignoreInstances");
-      plug.setBool(mCreateInstances);
-      
-      plug = dagNode.findPlug("cycleType");
-      plug.setShort(short(mCycleType));
-      
-      plug = dagNode.findPlug("speed");
-      plug.setDouble(mSpeed);
-      
-      plug = dagNode.findPlug("offset");
-      plug.setDouble(mOffset);
-      
-      plug = dagNode.findPlug("preserveStartFrame");
-      plug.setBool(mPreserveStartFrame);
-      
-      plug = dagNode.findPlug("objectExpression");
-      plug.setString(targetPath.c_str());
-      
-      plug = dagNode.findPlug("displayMode");
-      plug.setShort(short(mMode));
-      
-      plug = dagNode.findPlug("filePath");
-      plug.setString(mAbcPath.c_str());
-      
-      if (!exists)
+      if (!mUseGpuCache)
       {
-         // Only set those on newly created nodes
-         plug = dagNode.findPlug("visibleInReflections");
-         plug.setBool(true);
+         plug = dagNode.findPlug("ignoreXforms");
+         plug.setBool(!mIgnoreTransforms);
+         // Should I disable 'inheritsTransform' on parent too?
          
-         plug = dagNode.findPlug("visibleInRefractions");
-         plug.setBool(true);
+         plug = dagNode.findPlug("ignoreInstances");
+         plug.setBool(mCreateInstances);
          
-         plug = dagNode.findPlug("ignoreVisibility");
-         plug.setBool(true);
-      }
-      
-      // Only connect time if animated
-      // Note: On first evaluation, plug.asXXX doesn't seem to return valid values
-      //       though everything is correct within the compute method
-      //       Trigger a dummy evaluation before querying the value we're interested in
-      //       Internally, AbcShape will handle that nicely so that no un-necessary computations happen
-      plug = dagNode.findPlug("numShapes");
-      plug.asInt();
-      
-      plug = dagNode.findPlug("animated");
-      bool animated = plug.asBool();
-      
-      plug = dagNode.findPlug("time");
+         plug = dagNode.findPlug("cycleType");
+         plug.setShort(short(mCycleType));
          
-      MPlugArray srcs;
-      plug.connectedTo(srcs, true, false);
-      
-      if (animated)
-      {
-         if (srcs.length() == 0)
+         plug = dagNode.findPlug("speed");
+         plug.setDouble(mSpeed);
+         
+         plug = dagNode.findPlug("offset");
+         plug.setDouble(mOffset);
+         
+         plug = dagNode.findPlug("preserveStartFrame");
+         plug.setBool(mPreserveStartFrame);
+         
+         plug = dagNode.findPlug("objectExpression");
+         plug.setString(targetPath.c_str());
+         
+         plug = dagNode.findPlug("displayMode");
+         plug.setShort(short(mMode));
+         
+         plug = dagNode.findPlug("filePath");
+         plug.setString(mAbcPath.c_str());
+
+         // Only connect time if animated
+         // Note: On first evaluation, plug.asXXX doesn't seem to return valid values
+         //       though everything is correct within the compute method
+         //       Trigger a dummy evaluation before querying the value we're interested in
+         //       Internally, AbcShape will handle that nicely so that no un-necessary computations happen
+         plug = dagNode.findPlug("numShapes");
+         plug.asInt();
+         
+         plug = dagNode.findPlug("animated");
+         bool animated = plug.asBool();
+         
+         plug = dagNode.findPlug("time");
+            
+         MPlugArray srcs;
+         plug.connectedTo(srcs, true, false);
+         
+         if (animated)
+         {
+            if (srcs.length() == 0)
+            {
+               MDGModifier dgmod;
+               dgmod.connect(mTimeSource, plug);
+               dgmod.doIt();
+            }
+         }
+         else
          {
             MDGModifier dgmod;
-            dgmod.connect(mTimeSource, plug);
+            
+            for (unsigned int i=0; i<srcs.length(); ++i)
+            {
+               dgmod.disconnect(srcs[i], plug);
+            }
+            
             dgmod.doIt();
          }
       }
       else
       {
-         MDGModifier dgmod;
-         
-         for (unsigned int i=0; i<srcs.length(); ++i)
+         plug = dagNode.findPlug("cacheFileName");
+         plug.setString(mAbcPath.c_str());
+
+         plug = dagNode.findPlug("cacheGeomPath");
+         // replace "/" by "|" in targetPath
+         std::string tmp = targetPath;
+         size_t p0 = 0;
+         size_t p1 = tmp.find('/', p0);
+         while (p1 != std::string::npos)
          {
-            dgmod.disconnect(srcs[i], plug);
+            tmp[p1] = '|';
+            p0 = p1;
+            p1 = tmp.find('/', p0);
          }
+         plug.setString(tmp.c_str());
+      }
+      
+      if (!exists)
+      {
+         // Only set those on newly created nodes
+         plug = dagNode.findPlug("visibleInReflections");
+         plug.setBool(true);
          
-         dgmod.doIt();
+         plug = dagNode.findPlug("visibleInRefractions");
+         plug.setBool(true);
+         
+         plug = dagNode.findPlug("ignoreVisibility");
+         plug.setBool(true);
       }
    }
    
@@ -2943,6 +2991,9 @@ MStatus AbcShapeImport::doIt(const MArgList& args)
       MGlobal::displayInfo("-rm / -removeIfNoUpdate           :");
       MGlobal::displayInfo("                                    Remove nodes in maya tree that are not present in alembic file.");
       MGlobal::displayInfo("                                    Used only when -update flag is set.");
+      MGlobal::displayInfo("-ugc / -useGpuCache               : Use gpuCache instead of " + MString(PREFIX_NAME("AbcShape")) + ".");
+      MGlobal::displayInfo("                                    Note that the following shape related options won't have any effect:");
+      MGlobal::displayInfo("                                      -mode, -speed, -offset, -preserveStartFrame, -cycleType, -ignoreTransforms");
       MGlobal::displayInfo("-h / -help                        :");
       MGlobal::displayInfo("                                    Display this help.");
       MGlobal::displayInfo("");
@@ -3304,6 +3355,7 @@ MStatus AbcShapeImport::doIt(const MArgList& args)
       bool ignoreTransforms = argData.isFlagSet("ignoreTransforms");
       bool update = argData.isFlagSet("update");
       bool simplifyCurves = !argData.isFlagSet("dontSimplifyCurves");
+      bool useGpuCache = argData.isFlagSet("useGpuCache");
       
       if (ignoreTransforms && createInstances)
       {
@@ -3563,7 +3615,7 @@ MStatus AbcShapeImport::doIt(const MArgList& args)
                   MNamespace::setCurrentNamespace(ns);
                }
                
-               UpdateTree visitor(abcPath, dm, ignoreTransforms, createInstances, speed, offset, preserveStartFrame, ct, createMissing);
+               UpdateTree visitor(abcPath, dm, ignoreTransforms, createInstances, speed, offset, preserveStartFrame, ct, createMissing, useGpuCache);
                scene->visit(AlembicNode::VisitDepthFirst, visitor);
                
                visitor.keyTransforms(rotInterp, nodeRotInterp, false, simplifyCurves);
diff --git a/maya/AbcShape/mtoa/AbcShapeMtoa.py.tpl b/maya/AbcShape/mtoa/AbcShapeMtoa.py.tpl
index ddb619d..3268055 100644
--- a/maya/AbcShape/mtoa/AbcShapeMtoa.py.tpl
+++ b/maya/AbcShape/mtoa/AbcShapeMtoa.py.tpl
@@ -67,4 +67,5 @@ class <<NodeName>>Template(templates.ShapeTranslatorTemplate):
       self.endLayout()
 
 templates.registerTranslatorUI(<<NodeName>>Template, "<<NodeName>>", "<<NodeName>>Mtoa")
+templates.registerTranslatorUI(<<NodeName>>Template, "gpuCache", "<<NodeName>>Mtoa")
 
diff --git a/maya/AbcShape/mtoa/AbcTranslator.cpp b/maya/AbcShape/mtoa/AbcTranslator.cpp
index 4e5688b..145673b 100644
--- a/maya/AbcShape/mtoa/AbcTranslator.cpp
+++ b/maya/AbcShape/mtoa/AbcTranslator.cpp
@@ -11,6 +11,7 @@
 #include <maya/MBoundingBox.h>
 #include <maya/MDGContext.h>
 #include <maya/MTypes.h>
+#include <maya/MFnDagNode.h>
 
 #if MAYA_API_VERSION >= 2018000
 #  include <maya/MDGContextGuard.h>
@@ -267,6 +268,7 @@ void CAbcTranslator::NodeInitializer(CAbTranslator context)
 CAbcTranslator::CAbcTranslator()
    : CShapeTranslator()
    , m_motionBlur(false)
+   , m_isGpuCache(false)
 {
 }
 
@@ -278,6 +280,8 @@ void CAbcTranslator::Init()
 {
    CShapeTranslator::Init();
    m_motionBlur = (IsMotionBlurEnabled(MTOA_MBLUR_DEFORM|MTOA_MBLUR_OBJECT) && IsLocalMotionBlurEnabled());
+   MFnDagNode dagNode(m_dagPath);
+   m_isGpuCache = !strcmp(dagNode.typeName().asChar(), "gpuCache");
 }
 
 void CAbcTranslator::Export(AtNode *atNode)
@@ -292,7 +296,7 @@ void CAbcTranslator::ExportMotion(AtNode *atNode)
 
 void CAbcTranslator::RequestUpdate()
 {
-   SetUpdateMode(AI_RECREATE_NODE);
+   SetUpdateMode(AI_UPDATE_ONLY);
    CShapeTranslator::RequestUpdate();
 }
 
@@ -343,15 +347,22 @@ MPlug CAbcTranslator::FindMayaObjectPlug(const MString &attrName, MStatus* Retur
 void CAbcTranslator::GetFrames(double inRenderFrame, double inSampleFrame,
                                double &outRenderFrame, double &outSampleFrame)
 {
-   MPlug pTime = FindMayaObjectPlug("time");
+   if (m_isGpuCache)
+   {
+      outRenderFrame = inRenderFrame;
+      outSampleFrame = inSampleFrame;
+   }
+   else
+   {
+      MPlug pTime = FindMayaObjectPlug("time");
 
-   MDGContext ctx0(MTime(inRenderFrame, MTime::uiUnit()));
-   MDGContext ctx1(MTime(inSampleFrame, MTime::uiUnit()));
+      MDGContext ctx0(MTime(inRenderFrame, MTime::uiUnit()));
+      MDGContext ctx1(MTime(inSampleFrame, MTime::uiUnit()));
 
-   MStatus st;
-   MTime t;
+      MStatus st;
+      MTime t;
 
-   #if MAYA_API_VERSION >= 2018000
+      #if MAYA_API_VERSION >= 2018000
       {
          MDGContextGuard guard(ctx0);
          t = pTime.asMTime(&st);
@@ -362,13 +373,14 @@ void CAbcTranslator::GetFrames(double inRenderFrame, double inSampleFrame,
          t = pTime.asMTime(&st);
          outSampleFrame = (st == MS::kSuccess ? t.asUnits(MTime::uiUnit()) : inSampleFrame);
       }
-   #else
+      #else
       t = pTime.asMTime(ctx0, &st);
       outRenderFrame = (st == MS::kSuccess ? t.asUnits(MTime::uiUnit()) : inRenderFrame);
 
       t = pTime.asMTime(ctx1, &st);
       outSampleFrame = (st == MS::kSuccess ? t.asUnits(MTime::uiUnit()) : inSampleFrame);
-   #endif
+      #endif
+   }
 }
 
 double CAbcTranslator::GetFPS()
@@ -849,18 +861,12 @@ void CAbcTranslator::ExportProc(AtNode *proc, unsigned int step, double renderFr
    bool transformBlur = IsMotionBlurEnabled(MTOA_MBLUR_OBJECT) && IsLocalMotionBlurEnabled();
    bool deformBlur = IsMotionBlurEnabled(MTOA_MBLUR_DEFORM) && IsLocalMotionBlurEnabled();
 
-   bool ignoreXforms = FindMayaObjectPlug("ignoreXforms").asBool();
-   bool ignoreInstances = FindMayaObjectPlug("ignoreInstances").asBool();
-   bool ignoreVisibility = FindMayaObjectPlug("ignoreVisibility").asBool();
-
    MPlug plug;
 
-   bool isGpuCache = !strcmp(m_dagPath.node().apiTypeStr(), "gpuCache");
+   MString abcfile = FindMayaObjectPlug(m_isGpuCache ? "cacheFileName" : "filePath").asString();
+   MString objpath = FindMayaObjectPlug(m_isGpuCache ? "cacheGeomPath" : "objectExpression").asString();
 
-   MString abcfile = FindMayaObjectPlug(isGpuCache ? "cacheFileName" : "filePath").asString();
-   MString objpath = FindMayaObjectPlug(isGpuCache ? "cacheGeomPath" : "objectExpression").asString();
-
-   if (isGpuCache)
+   if (m_isGpuCache)
    {
       // replace "|" by "/" in objpath
       std::string tmp = objpath.asChar();
@@ -884,8 +890,12 @@ void CAbcTranslator::ExportProc(AtNode *proc, unsigned int step, double renderFr
       AiNodeSetFlt(proc, "fps", GetFPS());
       AiNodeSetFlt(proc, "frame", renderFrame);
 
-      if (!isGpuCache)
+      if (!m_isGpuCache)
       {
+         bool ignoreXforms = FindMayaObjectPlug("ignoreXforms").asBool();
+         bool ignoreInstances = FindMayaObjectPlug("ignoreInstances").asBool();
+         bool ignoreVisibility = FindMayaObjectPlug("ignoreVisibility").asBool();
+
          AiNodeSetFlt(proc, "speed", FindMayaObjectPlug("speed").asFloat());
          AiNodeSetFlt(proc, "offset", FindMayaObjectPlug("offset").asFloat());
          AiNodeSetBool(proc, "preserve_start_frame", FindMayaObjectPlug("preserveStartFrame").asBool());
diff --git a/maya/AbcShape/mtoa/AbcTranslator.h b/maya/AbcShape/mtoa/AbcTranslator.h
index e65e44c..b74d7c7 100644
--- a/maya/AbcShape/mtoa/AbcTranslator.h
+++ b/maya/AbcShape/mtoa/AbcTranslator.h
@@ -59,6 +59,7 @@ private:
 private:
 
    bool m_motionBlur;
+   bool m_isGpuCache;
    std::set<unsigned int> m_exportedSteps;
 };
 
diff --git a/maya/AbcShape/mtoa/main.cpp b/maya/AbcShape/mtoa/main.cpp
index e239abc..3bac656 100644
--- a/maya/AbcShape/mtoa/main.cpp
+++ b/maya/AbcShape/mtoa/main.cpp
@@ -8,11 +8,15 @@ DLLEXPORT void initializeExtension(CExtension& extension)
 {
    MStatus status;
    extension.Requires(NAME_PREFIX "AbcShape");
+   extension.Requires("gpuCache");
    status = extension.RegisterTranslator(NAME_PREFIX "AbcShape",
                                          "",
                                          CAbcTranslator::Create,
                                          CAbcTranslator::NodeInitializer);
-   // and gpuCache too?
+   status = extension.RegisterTranslator("gpuCache",
+                                         "",
+                                         CAbcTranslator::Create,
+                                         CAbcTranslator::NodeInitializer);
 }
 
 DLLEXPORT void deinitializeExtension(CExtension& extension)
